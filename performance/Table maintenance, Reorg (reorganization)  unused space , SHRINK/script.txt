We have identified an table which was hugely fragmented as shown below. 
The application was reading more blocks than the required. 
Hence we decided to reorg the table. 
Please find one such method reorganization process(SHRINK ) as shown below.

SQL>  select blocks,extents from dba_segments where segment_name=’SUB_RECON_STAGING’;

    BLOCKS    EXTENTS

———- ———-

    692224        268     ==> 5.4gb
	
SQL> select count (distinct dbms_rowid.rowid_block_number(rowid)) “used blocks” from RYSH.SUB_RECON_STAGING;

used blocks

———–

7987  ==>  62mb

SQL> select count(1) from RYSH.SUB_RECON_STAGING;

COUNT(1)

———-

690565  ==> avgrowlen* count(1)/1024/1024 = 60mb

Firstly Identify the Relative indexes for the table and run on online rebuild of the indexes first followed by the reorg of the table.

SQL> ALTER INDEX RYSH.IDX_SRS_1 REBUILD ONLINE;

or If you want to move the index from existing tablespace to another tablespace

SQL>  ALTER INDEX RYSH.IDX_SRS_1 REBUILD ONLINE TABLESPACE PF15A_IDX;

On sucessful completion of rebuild of indexes , we need to continue with Reorg of the tables.

SQL> alter table RYSH.SUB_RECON_STAGING enable row movement;

Table altered.

SQL> alter table RYSH.SUB_RECON_STAGING shrink space;

Table altered.

SQL> alter table RYSH.SUB_RECON_STAGING disable row movement;

Table altered.

SQL> select blocks,extents from dba_segments where segment_name=’SUB_RECON_STAGING’;

BLOCKS    EXTENTS

———- ———-

8976         80  ==> 70mb

SQL> select count (distinct dbms_rowid.rowid_block_number(rowid)) “used blocks” from RYSH.SUB_RECON_STAGING;

used blocks

———–

7069  ==>  55mb

from the above results , we have resized the table from 5.2 gb to just 55mb.  
You can also check the utilization at the tablespace level for this table as well as the disk space at the os level.

These are some of the sql’s that can help us to determine the ideal candidate for Reorg.

Select owner, segment_name, segment_type, tablespace_name, bytes/1048576 mbytes from dba_segments where bytes/1048576 > 1000;
Select sum(bytes/1024/1024) bytes from dba_segments where segment_name in (‘SUB_RECON_STAGING’);
Select sum(bytes/1024/1024) bytes from dba_segments where segment_name in (select index_name from dba_indexes where table_name in (‘SUB_RECON_STAGING’));
Select bytes/1024/1024,initial_extent/1024/1024,next_extent,tablespace_name from dba_segments where segment_name=’SUB_RECON_STAGING’;
Note:- If the table subjected to Reorg resides under the tablespace which is already set to autoextend on . 
Then you will not notice the reduction in size from the datafile sizes. But Oracle internally identifies 
the freed up space for that datafile and keeps writing the new data into the freed up blocks. 
It notifies only when all the freed blocks are completely written and there need more space to be added to the existing datafile.